
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> library(magrittr)
> library(reshape2)
> library(ggplot2)
> 
> set.seed(754646834L)
> 
> png(filename="gillespie-%02d.png",res=100)
> 
> c(gamma=24,mu=1/70,iota=0.1,
+   beta1=330,beta2=410,beta3=490,
+   beta.sd=0,
+   rho=0.1,
+   S_0=0.07,I_0=1e-4,R_0=0.93,
+   pop=1000000
+   ) -> params
> 
> rate.fun <- function(j, x, t, params, covars, ...) {
+     switch(
+         j,
+         params["mu"]*x["N"],            # birth
+         params["mu"]*x["S"],            # susceptible death
+         {                               # infection
+             beta <- sum(covars*params[c("beta1","beta2","beta3")])
+             (beta*x["I"]+params["iota"])*x["S"]/x["N"]
+         },
+         params["mu"]*x["I"],            # infected death
+         params["gamma"]*x["I"],         # recovery
+         params["mu"]*x["R"],           # recovered death
+         stop("unrecognized event ",j)
+     )
+ }
> 
> cbind(
+     birth=c(1,0,0,1,0),
+     sdeath=c(-1,0,0,-1,0),
+     infection=c(-1,1,0,0,0),
+     ideath=c(0,-1,0,-1,0),
+     recovery=c(0,-1,1,0,1),
+     rdeath=c(0,0,-1,-1,0)
+ ) -> Vmatrix
> 
> cbind(
+     birth=c(0,0,0,1,0),
+     sdeath=c(1,0,0,0,0),
+     infection=c(1,1,0,1,0),
+     ideath=c(0,1,0,0,0),
+     recovery=c(0,1,0,0,0),
+     rdeath=c(0,0,1,0,0)
+ ) -> Dmatrix
> 
> data.frame(
+     time=seq(from=0,to=2,by=1/52),
+     reports=NA
+ ) %>%
+     pomp(
+         times="time",
+         t0=0,
+         rprocess=gillespie.sim(rate.fun=rate.fun,v=Vmatrix,d=Dmatrix),
+         zeronames=c("cases"),
+         covar=data.frame(
+             t=seq(0,2,by=1/52/10),
+             seas=periodic.bspline.basis(
+                 seq(0,2,by=1/52/10),
+                 degree=3,period=1,nbasis=3)),
+         tcovar="t",
+         measurement.model=reports~binom(size=cases,prob=rho),
+         initializer=function(params, t0, ...){
+             comp.names <- c("S","I","R")
+             icnames <- paste(comp.names,"0",sep="_")
+             snames <- c("S","I","R","N","cases")
+             fracs <- params[icnames]
+             x0 <- numeric(length(snames))
+             names(x0) <- snames
+             x0["N"] <- params["pop"]
+             x0[comp.names] <- round(params['pop']*fracs/sum(fracs))
+             x0
+         }
+     ) %>%
+     simulate(params=params,seed=806867104L) -> gsir
> 
> gsir %>%
+     pomp(zeronames=NULL) %>%
+     simulate() %>%
+     plot()
> 
> gsir %>%
+     pomp(rprocess=gillespie.sim(rate.fun="_sir_rates",PACKAGE="pomp",
+                                 v=Vmatrix,d=Dmatrix),
+          nbasis=3L,degree=3L,period=1.0,
+          paramnames=c("gamma","mu","iota","beta1","beta.sd","pop","rho"),
+          statenames=c("S","I","R","cases")
+          ) %>%
+     simulate() %>%
+     plot()
In ‘pomp’: the following unrecognized argument(s) will be stored for use by user-defined functions: ‘nbasis’,‘degree’,‘period’
> 
> pompExample(gillespie.sir)
In ‘pomp’: the following unrecognized argument(s) will be stored for use by user-defined functions: ‘comp.names’,‘ic.names’,‘nbasis’,‘degree’,‘period’
newly created object(s):
 gillespie.sir 
> gsir2 <- simulate(gillespie.sir,params=coef(gsir),
+                   times=time(gsir),t0=timezero(gsir),seed=806867104L)
> 
> list(R=as.data.frame(gsir),
+      C=as.data.frame(gsir2)) %>%
+     melt(id="time") %>%
+     subset(variable=="reports") %>%
+     ggplot(aes(x=time,y=value,color=L1))+
+     labs(color="",y="reports")+
+     geom_line()+
+     theme_bw()+theme(legend.position=c(0.2,0.8))
> 
> try(gsir %>% pomp(rprocess=gillespie.sim(rate.fun=rate.fun,v=as.numeric(Vmatrix),d=Dmatrix)))
Error : in ‘pomp’: in ‘gillespie.sim’ plugin: ‘v’ and ‘d’ must be matrices.
> try(gsir %>% pomp(rprocess=kleap.sim(rate.fun=rate.fun,e=rep(0.1,5),v=as.numeric(Vmatrix),d=Dmatrix)))
Error : in ‘pomp’: in ‘kleap.sim’ plugin: ‘v’ and ‘d’ must be matrices.
> 
> gsir %>%
+     pomp(
+         rprocess=kleap.sim(
+             rate.fun=rate.fun,
+             e=rep(0.1,5),
+             v=Vmatrix,
+             d=Dmatrix),
+         ) -> gsir2
> 
> simulate(gsir,seed=95424809L,as.data.frame=TRUE) -> exact
> simulate(gsir2,seed=95424809L,as.data.frame=TRUE) -> kleap
> 
> list(exact=exact,`K leap`=kleap) %>%
+     melt(id=c("time","sim")) %>%
+     subset(variable=="cases") %>%
+     ggplot(aes(x=time,y=value,group=interaction(sim,L1),color=L1))+
+     labs(color="",y="cases")+
+     geom_line()+
+     theme_bw()+theme(legend.position=c(0.2,0.8))
> 
> stopifnot(
+     gsir %>%
+     simulate(params=c(gamma=0,mu=0,iota=0,beta1=0,beta2=0,beta3=0,beta.sd=0,
+                       rho=0.1,S_0=0.07,I_0=1e-4,R_0=0.93,pop=1e6)) %>%
+     states() %>% apply(1,diff) %>% equals(0) %>% all())
> stopifnot(
+     gsir2 %>%
+     simulate(params=c(gamma=0,mu=0,iota=0,beta1=0,beta2=0,beta3=0,beta.sd=0,
+                       rho=0.1,S_0=0.07,I_0=1e-4,R_0=0.93,pop=1e6)) %>%
+     states() %>% apply(1,diff) %>% equals(0) %>% all())
> 
> rate.fun.bad <- function(j, x, t, params, covars, ...) {
+     if (t>1) {
+         as.numeric(0)
+     } else {
+         rate.fun(j,x,t,params,covars,...)
+     }
+ }
> 
> try(pomp(gsir,rprocess=gillespie.sim(rate.fun=rate.fun.bad,v=Vmatrix,d=Dmatrix)) %>% simulate() %>% plot())
> try(pomp(gsir,rprocess=kleap.sim(rate.fun=rate.fun.bad,e=rep(0.2,5),v=Vmatrix,d=Dmatrix)) %>% simulate() %>% plot())
> 
> rate.fun.bad <- function(j, x, t, params, covars, ...) {
+     if (t>1) {
+         -rate.fun(j,x,t,params,covars,...)
+     } else {
+         rate.fun(j,x,t,params,covars,...)
+     }
+ }
> 
> try(pomp(gsir,rprocess=gillespie.sim(rate.fun=rate.fun.bad,v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘simulate’: in ‘gillespie.sim’ plugin: negative event rate in stochastic simulation algorithm.
> try(pomp(gsir,rprocess=kleap.sim(rate.fun=rate.fun.bad,e=rep(1,5),v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘simulate’: in ‘kleap.sim’ plugin: negative event rate in stochastic simulation algorithm.
> 
> rate.fun.bad <- function(j, x, t, params, covars, ...) c(1,1)
> 
> try(pomp(gsir,rprocess=gillespie.sim(rate.fun=rate.fun.bad,v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘simulate’: in ‘gillespie.sim’ plugin: user 'rates' must return a single scalar rate.
> try(pomp(gsir,rprocess=kleap.sim(rate.fun=rate.fun.bad,e=rep(0.2,5),v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘simulate’: in ‘kleap.sim’ plugin: user 'rates' must return a single scalar rate.
> 
> try(pomp(gsir,rprocess=gillespie.sim(rate.fun=3,v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘pomp’: in ‘gillespie.sim’ plugin: bad option for ‘rate.fn’ argument
> try(pomp(gsir,rprocess=kleap.sim(rate.fun=3,e=rep(0.2,5),v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘pomp’: in ‘kleap.sim’ plugin: bad option for ‘rate.fn’ argument
> try(pomp(gsir,rprocess=kleap.sim(rate.fun="bob",e=rep(0.2,5),v=Vmatrix,d=Dmatrix)) %>% simulate())
Error : in ‘simulate’: in ‘kleap.sim’ plugin: no such symbol bob
> 
> dev.off()
null device 
          1 
> 
